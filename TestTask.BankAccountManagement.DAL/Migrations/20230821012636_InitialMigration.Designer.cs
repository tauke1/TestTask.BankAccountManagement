// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestTask.BankAccountManagement.DAL.Contexts;

#nullable disable

namespace TestTask.BankAccountManagement.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230821012636_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TestTask.BankAccountManagement.DAL.Models.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(28,2)");

                    b.Property<DateTime?>("BlockedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedByManagerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Iban")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsHardBlocked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OpenedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedByManagerId");

                    b.HasIndex("Iban")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("TestTask.BankAccountManagement.DAL.Models.AccountOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(28,2)");

                    b.Property<decimal>("BalanceBefore")
                        .HasColumnType("decimal(28,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("TransactionId");

                    b.ToTable("AccountOperations");
                });

            modelBuilder.Entity("TestTask.BankAccountManagement.DAL.Models.AccountTypeSettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<int?>("MaxTransactionsPerDay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountType")
                        .IsUnique();

                    b.ToTable("AccountTypeSettings");
                });

            modelBuilder.Entity("TestTask.BankAccountManagement.DAL.Models.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("TestTask.BankAccountManagement.DAL.Models.Manager", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PinHashed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("TestTask.BankAccountManagement.DAL.Models.Transaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(28,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FromAccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReferenceRetrievalNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("ToAccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("TriggeredByManagerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FromAccountId");

                    b.HasIndex("ReferenceRetrievalNumber")
                        .IsUnique();

                    b.HasIndex("ToAccountId");

                    b.HasIndex("TriggeredByManagerId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("TestTask.BankAccountManagement.DAL.Models.Account", b =>
                {
                    b.HasOne("TestTask.BankAccountManagement.DAL.Models.Country", "Country")
                        .WithMany("Accounts")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestTask.BankAccountManagement.DAL.Models.Manager", "CreatedByManager")
                        .WithMany("CreatedAccounts")
                        .HasForeignKey("CreatedByManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("CreatedByManager");
                });

            modelBuilder.Entity("TestTask.BankAccountManagement.DAL.Models.AccountOperation", b =>
                {
                    b.HasOne("TestTask.BankAccountManagement.DAL.Models.Account", "Account")
                        .WithMany("Operations")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestTask.BankAccountManagement.DAL.Models.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("TestTask.BankAccountManagement.DAL.Models.Transaction", b =>
                {
                    b.HasOne("TestTask.BankAccountManagement.DAL.Models.Account", "FromAccount")
                        .WithMany("CreditTransactions")
                        .HasForeignKey("FromAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestTask.BankAccountManagement.DAL.Models.Account", "ToAccount")
                        .WithMany("DebitTransactions")
                        .HasForeignKey("ToAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestTask.BankAccountManagement.DAL.Models.Manager", "TriggeredByManager")
                        .WithMany("TriggeredTransactions")
                        .HasForeignKey("TriggeredByManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromAccount");

                    b.Navigation("ToAccount");

                    b.Navigation("TriggeredByManager");
                });

            modelBuilder.Entity("TestTask.BankAccountManagement.DAL.Models.Account", b =>
                {
                    b.Navigation("CreditTransactions");

                    b.Navigation("DebitTransactions");

                    b.Navigation("Operations");
                });

            modelBuilder.Entity("TestTask.BankAccountManagement.DAL.Models.Country", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("TestTask.BankAccountManagement.DAL.Models.Manager", b =>
                {
                    b.Navigation("CreatedAccounts");

                    b.Navigation("TriggeredTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
